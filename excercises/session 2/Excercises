Exercise 1
-------------

- Is the schedule conflict serializable?
Yes
- Could the schedule have been generated by a scheduler using strict 2PL?
No

Exercise 2
------------
- Are there any conflicts between the following Transaction pairs:
{T1, T2} (x,z)
{T1, T3} (x)
{T2, T3} (ok)

- Is the schedule conflict serializable?
Yes

- Could the schedule have been generated by a scheduler using strict 2PL?
Abort, No!

Exercise 3
------------
- The ACID properties are: Availability, Consistency, Integrity and Durability.
False, they are actually Atomicity, Consistency, Isolation, Durability

- Strict 2PL is a concurrency control protocol that has a lock acquisition phase and a lock
release phase, so strict 2PL may suffer from cascading aborts.
False, conservative strict 2PL suffers from cascading aborts

- Strict 2PL may lead to deadlocks.
False, can lead to deadlocks but by aborting normally not the case.


Exercise 4
------------
- Locking is a pessimistic approach in which conflicts are prevented and performance is improved.
False, the performance is not improved (conflicts are prevented)

- There are concurrency control protocols based on locking that prevent deadlocks altogether,
and therefore these protocols do not need to implement deadlock detection.
True, conservative 2PL is an example of that

- In optimistic concurrency control, transactions are allowed to issue writes during the Read Phase,
but these writes are not made in-place directly to the database.
True, 
